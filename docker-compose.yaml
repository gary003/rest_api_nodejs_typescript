services:
  app:
    build: .
    ports:
      - '${API_PORT:-8080}:${API_PORT:-8080}'
    depends_on:
      db:
        condition: service_started
    environment:
      - DB_DRIVER=${DB_DRIVER:-mysql}
      - DB_HOST=${DB_HOST:-db}
      - DB_USERNAME=${DB_USERNAME:-mysql}
      - DB_PASSWORD=${DB_PASSWORD:-mypass}
      - DB_DATABASE_NAME=${DB_DATABASE_NAME:-mydb}
      - DB_PORT=${DB_PORT:-3306}
      - CRYPTO_SECRET_KEY=${CRYPTO_SECRET_KEY:-4876he526d9148b7ac40bd623b240753}
      - API_PORT=${API_PORT:-8080}
      - LOGLEVEL=${LOGLEVEL:-debug}
    restart: always
    networks:
      - my_app_network
      - my_db_network

  db:
    image: mysql:latest
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD:-StrongRootPassword123!}
      - MYSQL_USER=${DB_USERNAME:-mysql}
      - MYSQL_PASSWORD=${DB_PASSWORD:-mypass}
      - MYSQL_DATABASE=${DB_DATABASE_NAME:-mydb}
    volumes:
      - ./src/v1/infrastructure/persistence/database/db_volume:/var/lib/mysql
      - ./src/v1/infrastructure/persistence/database/db_scripts/:/docker-entrypoint-initdb.d/
    ports:
      - '${DB_PORT:-3306}:${DB_PORT:-3306}'
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10
    networks:
      - my_db_network

  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    command: ['--config=/etc/otel-config.yaml']
    volumes:
      - ./src/v1/infrastructure/observability/otel-collector-config.yaml:/etc/otel-config.yaml
    ports:
      - '54317:4317' # OTLP gRPC (host:container)
      - '54318:4318' # OTLP HTTP (host:container)
      - '13133:13133' # health_check
      - '8888:8888' # Prometheus metrics
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:13133/livez']
      interval: 30s
      timeout: 10s
      retries: 3
    # depends_on:
    #   tempo:
    #     condition: service_started
    networks:
      - my_app_network

  # tempo:
  #   image: grafana/tempo:latest
  #   command: ['-config.file=/etc/tempo.yaml']
  #   volumes:
  #     - ./src/v1/infrastructure/observability/tempo.yaml:/etc/tempo.yaml
  #     - ./src/v1/infrastructure/observability/trace_data_volume:/tmp/tempo
  #   ports:
  #     - '3200:3200' # Tempo HTTP API
  #     - '14268:14268' # Jaeger Thrift HTTP
  #     - '9411:9411' # Zipkin
  #     - '64318:4318' # OTLP HTTP (internal only)
  #     - '64317:4317' # OTLP gRPC (internal only)
  #   healthcheck:
  #     test: ['CMD', 'curl', '-f', 'http://localhost:3200/status']
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - my_app_network

  # # Prometheus (optional)
  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - ./src/v1/infrastructure/observability/prometheus.yml:/etc/prometheus/prometheus.yml
  #   ports:
  #     - '9090:9090'
  #   networks:
  #     - observability_network

  # grafana:
  #   image: grafana/grafana:latest
  #   user: "472:472"  # Run as grafana user (UID 472)
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=admin
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #     - GF_PATHS_DATA=/var/lib/grafana
  #     - GF_PATHS_PLUGINS=/var/lib/grafana/plugins
  #   volumes:
  #     - ./src/v1/infrastructure/observability/prometheus/dashboard_data:/var/lib/grafana
  #   depends_on:
  #     - tempo
  #   networks:
  #     - observability_network

networks:
  my_app_network:
    driver: bridge
  my_db_network:
    driver: bridge
  # observability_network:
  #   driver: bridge
# volumes:
#   grafana_data:
