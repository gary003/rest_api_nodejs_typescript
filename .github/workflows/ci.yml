name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_VERSION: 22
  DOCKER_IMAGE: gary003/rest-api-nodejs-typescript
  DOCKER_TAG: latest

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create .env file
        run: |
          echo "DB_DRIVER=mysql" >> .env
          echo "DB_HOST=localhost" >> .env  # Matches the service name 'mysql'
          echo "DB_PORT=3306" >> .env
          echo "DB_USERNAME=root" >> .env
          echo "DB_PASSWORD=testpassword" >> .env  # Matches MYSQL_ROOT_PASSWORD
          echo "DB_DATABASE_NAME=testdb" >> .env  # Matches MYSQL_DATABASE
          echo "DB_URI=mysql://root:testpassword@localhost:3306/testdb" >> .env
          echo "API_PORT=8080" >> .env
          echo "LOGLEVEL=debug" >> .env
          echo "NODE_ENV=test" >> .env
          echo "SWAGGER_HOST=localhost:8080" >> .env
          echo "SWAGGER_BASE_PATH=/api/v1" >> .env

      - name: Run all tests
        run: npm run test
        env:
          CI: true

      - name: Upload test artifacts (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs
          path: |
            *.log
            coverage/

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: npm run build:docker:image

      - name: Test Docker image
        run: |
          docker run --rm -d -p 8080:8080 --name test-container ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          sleep 5  # Wait for container to start
          curl --fail http://localhost:8080/apiDoc || exit 1
          docker stop test-container

      - name: Debug Secrets
        run: echo '???? ${{ secrets.DOCKER_HUB_USERNAME }} !!!!!2992!!!!! ${{ toJson(secrets) }} ~~~'

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          logout: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
